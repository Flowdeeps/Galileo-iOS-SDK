<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/GCPositionControl.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/GCPositionControl</TokenIdentifier>
			<Abstract type="html">The GCPositionControl object allows you to control Galileo&apos;s rotational position for a given axis. You can access the instance through the positionControlForAxis: method of the Galileo singleton instance.</Abstract>
			<DeclaredIn>GCPositionControl.h</DeclaredIn>
            
			
			<NodeRef refid="5"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GCPositionControl/setSmallestAngleIncrement:</TokenIdentifier>
			<Abstract type="html">The smallest angle, in degrees, that the accessory can reliably move.</Abstract>
			<DeclaredIn>GCPositionControl.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) double smallestAngleIncrement</Declaration>
			
			
			<Anchor>//api/name/smallestAngleIncrement</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GCPositionControl/smallestAngleIncrement</TokenIdentifier>
			<Abstract type="html">The smallest angle, in degrees, that the accessory can reliably move.</Abstract>
			<DeclaredIn>GCPositionControl.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) double smallestAngleIncrement</Declaration>
			
			
			<Anchor>//api/name/smallestAngleIncrement</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/GCPositionControl/smallestAngleIncrement</TokenIdentifier>
			<Abstract type="html">The smallest angle, in degrees, that the accessory can reliably move.</Abstract>
			<DeclaredIn>GCPositionControl.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) double smallestAngleIncrement</Declaration>
			
			
			<Anchor>//api/name/smallestAngleIncrement</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GCPositionControl/setHoldPositionWhenStationary:</TokenIdentifier>
			<Abstract type="html">Indicates whether the motors should actively hold position whilst stationary.</Abstract>
			<DeclaredIn>GCPositionControl.h</DeclaredIn>
			
			<Declaration>@property (nonatomic) BOOL holdPositionWhenStationary</Declaration>
			
			
			<Anchor>//api/name/holdPositionWhenStationary</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GCPositionControl/holdPositionWhenStationary</TokenIdentifier>
			<Abstract type="html">Indicates whether the motors should actively hold position whilst stationary.</Abstract>
			<DeclaredIn>GCPositionControl.h</DeclaredIn>
			
			<Declaration>@property (nonatomic) BOOL holdPositionWhenStationary</Declaration>
			
			
			<Anchor>//api/name/holdPositionWhenStationary</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/GCPositionControl/holdPositionWhenStationary</TokenIdentifier>
			<Abstract type="html">Indicates whether the motors should actively hold position whilst stationary.</Abstract>
			<DeclaredIn>GCPositionControl.h</DeclaredIn>
			
			<Declaration>@property (nonatomic) BOOL holdPositionWhenStationary</Declaration>
			
			
			<Anchor>//api/name/holdPositionWhenStationary</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GCPositionControl/setTorque:</TokenIdentifier>
			<Abstract type="html">Motor torque setting as a percentage of maximum possible.</Abstract>
			<DeclaredIn>GCPositionControl.h</DeclaredIn>
			
			<Declaration>@property (nonatomic) double torque</Declaration>
			
			
			<Anchor>//api/name/torque</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GCPositionControl/torque</TokenIdentifier>
			<Abstract type="html">Motor torque setting as a percentage of maximum possible.</Abstract>
			<DeclaredIn>GCPositionControl.h</DeclaredIn>
			
			<Declaration>@property (nonatomic) double torque</Declaration>
			
			
			<Anchor>//api/name/torque</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/GCPositionControl/torque</TokenIdentifier>
			<Abstract type="html">Motor torque setting as a percentage of maximum possible.</Abstract>
			<DeclaredIn>GCPositionControl.h</DeclaredIn>
			
			<Declaration>@property (nonatomic) double torque</Declaration>
			
			
			<Anchor>//api/name/torque</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GCPositionControl/setVelocity:</TokenIdentifier>
			<Abstract type="html">Velocity, in degrees per second.</Abstract>
			<DeclaredIn>GCPositionControl.h</DeclaredIn>
			
			<Declaration>@property (nonatomic) double velocity</Declaration>
			
			
			<Anchor>//api/name/velocity</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GCPositionControl/velocity</TokenIdentifier>
			<Abstract type="html">Velocity, in degrees per second.</Abstract>
			<DeclaredIn>GCPositionControl.h</DeclaredIn>
			
			<Declaration>@property (nonatomic) double velocity</Declaration>
			
			
			<Anchor>//api/name/velocity</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/GCPositionControl/velocity</TokenIdentifier>
			<Abstract type="html">Velocity, in degrees per second.</Abstract>
			<DeclaredIn>GCPositionControl.h</DeclaredIn>
			
			<Declaration>@property (nonatomic) double velocity</Declaration>
			
			
			<Anchor>//api/name/velocity</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GCPositionControl/setMaxVelocity:</TokenIdentifier>
			<Abstract type="html">The maximum velocity Galileo is able to move at, in degrees per second.</Abstract>
			<DeclaredIn>GCPositionControl.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) double maxVelocity</Declaration>
			
			
			<Anchor>//api/name/maxVelocity</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GCPositionControl/maxVelocity</TokenIdentifier>
			<Abstract type="html">The maximum velocity Galileo is able to move at, in degrees per second.</Abstract>
			<DeclaredIn>GCPositionControl.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) double maxVelocity</Declaration>
			
			
			<Anchor>//api/name/maxVelocity</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/GCPositionControl/maxVelocity</TokenIdentifier>
			<Abstract type="html">The maximum velocity Galileo is able to move at, in degrees per second.</Abstract>
			<DeclaredIn>GCPositionControl.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) double maxVelocity</Declaration>
			
			
			<Anchor>//api/name/maxVelocity</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GCPositionControl/setMinVelocity:</TokenIdentifier>
			<Abstract type="html">The minimum velocity Galileo is able to move at, in degrees per second.</Abstract>
			<DeclaredIn>GCPositionControl.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) double minVelocity</Declaration>
			
			
			<Anchor>//api/name/minVelocity</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GCPositionControl/minVelocity</TokenIdentifier>
			<Abstract type="html">The minimum velocity Galileo is able to move at, in degrees per second.</Abstract>
			<DeclaredIn>GCPositionControl.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) double minVelocity</Declaration>
			
			
			<Anchor>//api/name/minVelocity</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/GCPositionControl/minVelocity</TokenIdentifier>
			<Abstract type="html">The minimum velocity Galileo is able to move at, in degrees per second.</Abstract>
			<DeclaredIn>GCPositionControl.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) double minVelocity</Declaration>
			
			
			<Anchor>//api/name/minVelocity</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GCPositionControl/setAcceleration:</TokenIdentifier>
			<Abstract type="html">Acceleration, in degrees per second per second.</Abstract>
			<DeclaredIn>GCPositionControl.h</DeclaredIn>
			
			<Declaration>@property (nonatomic) double acceleration</Declaration>
			
			
			<Anchor>//api/name/acceleration</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GCPositionControl/acceleration</TokenIdentifier>
			<Abstract type="html">Acceleration, in degrees per second per second.</Abstract>
			<DeclaredIn>GCPositionControl.h</DeclaredIn>
			
			<Declaration>@property (nonatomic) double acceleration</Declaration>
			
			
			<Anchor>//api/name/acceleration</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/GCPositionControl/acceleration</TokenIdentifier>
			<Abstract type="html">Acceleration, in degrees per second per second.</Abstract>
			<DeclaredIn>GCPositionControl.h</DeclaredIn>
			
			<Declaration>@property (nonatomic) double acceleration</Declaration>
			
			
			<Anchor>//api/name/acceleration</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GCPositionControl/setMaxAcceleration:</TokenIdentifier>
			<Abstract type="html">The maximum acceleration Galileo is capable of, in degrees per second per second.</Abstract>
			<DeclaredIn>GCPositionControl.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) double maxAcceleration</Declaration>
			
			
			<Anchor>//api/name/maxAcceleration</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GCPositionControl/maxAcceleration</TokenIdentifier>
			<Abstract type="html">The maximum acceleration Galileo is capable of, in degrees per second per second.</Abstract>
			<DeclaredIn>GCPositionControl.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) double maxAcceleration</Declaration>
			
			
			<Anchor>//api/name/maxAcceleration</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/GCPositionControl/maxAcceleration</TokenIdentifier>
			<Abstract type="html">The maximum acceleration Galileo is capable of, in degrees per second per second.</Abstract>
			<DeclaredIn>GCPositionControl.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) double maxAcceleration</Declaration>
			
			
			<Anchor>//api/name/maxAcceleration</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GCPositionControl/setMinAcceleration:</TokenIdentifier>
			<Abstract type="html">The minimum acceleration Galileo is capable of, in degrees per second per second.</Abstract>
			<DeclaredIn>GCPositionControl.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) double minAcceleration</Declaration>
			
			
			<Anchor>//api/name/minAcceleration</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GCPositionControl/minAcceleration</TokenIdentifier>
			<Abstract type="html">The minimum acceleration Galileo is capable of, in degrees per second per second.</Abstract>
			<DeclaredIn>GCPositionControl.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) double minAcceleration</Declaration>
			
			
			<Anchor>//api/name/minAcceleration</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/GCPositionControl/minAcceleration</TokenIdentifier>
			<Abstract type="html">The minimum acceleration Galileo is capable of, in degrees per second per second.</Abstract>
			<DeclaredIn>GCPositionControl.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) double minAcceleration</Declaration>
			
			
			<Anchor>//api/name/minAcceleration</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GCPositionControl/setCurrentPosition:</TokenIdentifier>
			<Abstract type="html">The current position, in degress.</Abstract>
			<DeclaredIn>GCPositionControl.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) double currentPosition</Declaration>
			
			
			<Anchor>//api/name/currentPosition</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GCPositionControl/currentPosition</TokenIdentifier>
			<Abstract type="html">The current position, in degress.</Abstract>
			<DeclaredIn>GCPositionControl.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) double currentPosition</Declaration>
			
			
			<Anchor>//api/name/currentPosition</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/GCPositionControl/currentPosition</TokenIdentifier>
			<Abstract type="html">The current position, in degress.</Abstract>
			<DeclaredIn>GCPositionControl.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) double currentPosition</Declaration>
			
			
			<Anchor>//api/name/currentPosition</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GCPositionControl/setTargetPosition:</TokenIdentifier>
			<Abstract type="html">The target position, in degress, you wish to set the accessory to.</Abstract>
			<DeclaredIn>GCPositionControl.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) double targetPosition</Declaration>
			
			
			<Anchor>//api/name/targetPosition</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GCPositionControl/targetPosition</TokenIdentifier>
			<Abstract type="html">The target position, in degress, you wish to set the accessory to.</Abstract>
			<DeclaredIn>GCPositionControl.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) double targetPosition</Declaration>
			
			
			<Anchor>//api/name/targetPosition</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/GCPositionControl/targetPosition</TokenIdentifier>
			<Abstract type="html">The target position, in degress, you wish to set the accessory to.</Abstract>
			<DeclaredIn>GCPositionControl.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) double targetPosition</Declaration>
			
			
			<Anchor>//api/name/targetPosition</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GCPositionControl/setAtTargetPosition:</TokenIdentifier>
			<Abstract type="html">True if the accessory is idle at the target position. False if the accessory is still moving in an attempt to reach the target postion.</Abstract>
			<DeclaredIn>GCPositionControl.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly, getter=isAtTargetPosition) BOOL atTargetPosition</Declaration>
			
			
			<Anchor>//api/name/atTargetPosition</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GCPositionControl/isAtTargetPosition</TokenIdentifier>
			<Abstract type="html">True if the accessory is idle at the target position. False if the accessory is still moving in an attempt to reach the target postion.</Abstract>
			<DeclaredIn>GCPositionControl.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly, getter=isAtTargetPosition) BOOL atTargetPosition</Declaration>
			
			
			<Anchor>//api/name/atTargetPosition</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/GCPositionControl/atTargetPosition</TokenIdentifier>
			<Abstract type="html">True if the accessory is idle at the target position. False if the accessory is still moving in an attempt to reach the target postion.</Abstract>
			<DeclaredIn>GCPositionControl.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly, getter=isAtTargetPosition) BOOL atTargetPosition</Declaration>
			
			
			<Anchor>//api/name/atTargetPosition</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GCPositionControl/resetOriginToCurrentPosition</TokenIdentifier>
			<Abstract type="html">Resets the origin to the current position.</Abstract>
			<DeclaredIn>GCPositionControl.h</DeclaredIn>
			
			<Declaration>- (void)resetOriginToCurrentPosition</Declaration>
			
			
			<Anchor>//api/name/resetOriginToCurrentPosition</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GCPositionControl/setTargetPosition:completionBlock:waitUntilStationary:</TokenIdentifier>
			<Abstract type="html">Rotate Galileo to a new position.</Abstract>
			<DeclaredIn>GCPositionControl.h</DeclaredIn>
			
			<Declaration>- (void)setTargetPosition:(double)newTargetPosition completionBlock:(void ( ^ ) ( BOOL wasCommandPreempted ))completionBlock waitUntilStationary:(BOOL)waitUntilStationary</Declaration>
			<Parameters>
				<Parameter>
					<Name>newTargetPosition</Name>
					<Abstract type="html">The target position, in degrees, in relation to the origin.</Abstract>
				</Parameter><Parameter>
					<Name>completionBlock</Name>
					<Abstract type="html">The block to be executed on completion or preemption.</Abstract>
				</Parameter><Parameter>
					<Name>waitUntilStationary</Name>
					<Abstract type="html">If TRUE the call blocks untill the accessory has stopped moving.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setTargetPosition:completionBlock:waitUntilStationary:</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GCPositionControl/setTargetPosition:notifyDelegate:waitUntilStationary:</TokenIdentifier>
			<Abstract type="html">Rotate Galileo to a new position.</Abstract>
			<DeclaredIn>GCPositionControl.h</DeclaredIn>
			
			<Declaration>- (void)setTargetPosition:(double)newTargetPosition notifyDelegate:(id&lt;GCPositionControlDelegate&gt;)delegate waitUntilStationary:(BOOL)waitUntilStationary</Declaration>
			<Parameters>
				<Parameter>
					<Name>newTargetPosition</Name>
					<Abstract type="html">The target position, in degrees, in relation to the origin.</Abstract>
				</Parameter><Parameter>
					<Name>delegate</Name>
					<Abstract type="html">The delegate to be notified on completion or preemption.</Abstract>
				</Parameter><Parameter>
					<Name>waitUntilStationary</Name>
					<Abstract type="html">If TRUE the call blocks untill the accessory has stopped moving.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setTargetPosition:notifyDelegate:waitUntilStationary:</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GCPositionControl/incrementTargetPosition:completionBlock:waitUntilStationary:</TokenIdentifier>
			<Abstract type="html">Rotate Galileo to a new position, relative to it&apos;s current target position. Rotation is clockwise for positive valued increment amounts and anti-clockwise otherwise.</Abstract>
			<DeclaredIn>GCPositionControl.h</DeclaredIn>
			
			<Declaration>- (void)incrementTargetPosition:(double)amount completionBlock:(void ( ^ ) ( BOOL wasCommandPreempted ))completionBlock waitUntilStationary:(BOOL)waitUntilStationary</Declaration>
			<Parameters>
				<Parameter>
					<Name>amount</Name>
					<Abstract type="html">The amount, in degrees, to increment the target position by.</Abstract>
				</Parameter><Parameter>
					<Name>completionBlock</Name>
					<Abstract type="html">The block to be executed on completion or preemption.</Abstract>
				</Parameter><Parameter>
					<Name>waitUntilStationary</Name>
					<Abstract type="html">If TRUE the call blocks untill the accessory has stopped moving.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/incrementTargetPosition:completionBlock:waitUntilStationary:</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GCPositionControl/incrementTargetPosition:notifyDelegate:waitUntilStationary:</TokenIdentifier>
			<Abstract type="html">Rotate Galileo to a new position, relative to it&apos;s current target position. Rotation is clockwise for positive valued increment amounts and anti-clockwise otherwise.</Abstract>
			<DeclaredIn>GCPositionControl.h</DeclaredIn>
			
			<Declaration>- (void)incrementTargetPosition:(double)amount notifyDelegate:(id&lt;GCPositionControlDelegate&gt;)delegate waitUntilStationary:(BOOL)waitUntilStationary</Declaration>
			<Parameters>
				<Parameter>
					<Name>amount</Name>
					<Abstract type="html">The amount, in degrees, to increment the target position by.</Abstract>
				</Parameter><Parameter>
					<Name>delegate</Name>
					<Abstract type="html">The delegate to be notified on completion or preemption.</Abstract>
				</Parameter><Parameter>
					<Name>waitUntilStationary</Name>
					<Abstract type="html">If TRUE the call blocks untill the accessory has stopped moving.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/incrementTargetPosition:notifyDelegate:waitUntilStationary:</Anchor>
            <NodeRef refid="5"/>
		</Token>
		
        
	</File>
</Tokens>